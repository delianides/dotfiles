" vim: fdm=marker foldlevel=98 foldenable sw=4 ts=4 sts=4
"        _
" __   _(_)_ __ ___  _ __ ___
" \ \ / / | '_ ` _ \| '__/ __|
"  \ V /| | | | | | | | | (__
" (_)_/ |_|_| |_| |_|_|  \___|
"
" VIMPATH
let $VIMPATH=expand('$HOME/.vim')
" Leader key
let mapleader = ' '
" exit to normal mode with 'jj', so i don't always have to hit the escape key
inoremap jj <ESC>
" No need for ex mode
nnoremap Q <nop>
" recording macros is not my thing
map q <Nop>
" Allow saving of files as sudo when I forgot to start vim using sudo.
cmap w!! w !sudo tee > /dev/null %

call plug#begin('~/.vim/plugged')

Plug 'vim-airline/vim-airline' "Airline
Plug 'vim-airline/vim-airline-themes' " Airline Themes
Plug 'fatih/molokai'
Plug '/usr/local/opt/fzf' | Plug 'junegunn/fzf.vim' " FuzzyFind
Plug 'junegunn/vim-easy-align' " align lines based on args
Plug 'lambdalisue/vim-gista', { 'on': 'Gista' } " manipulate gists in vim
Plug 'AndrewRadev/splitjoin.vim' "join things together
Plug 'Shougo/vimproc.vim', { 'do': 'make' }
Plug 'tpope/vim-fugitive' " git commands in vim
Plug 'tpope/vim-vinegar' " netrw play nicely
Plug 'airblade/vim-gitgutter' " show git changes in column
Plug 'terryma/vim-multiple-cursors'
Plug 'w0rp/ale' " async linting tool
Plug 'sbdchd/neoformat' " formatting tool
Plug 'ap/vim-css-color' " CSS Hex Color
Plug 'tpope/vim-surround' " surround vim objects with a string
Plug 'Raimondi/delimitMate' "closing brackets or braces
Plug 'tpope/vim-commentary' " universal comment application
Plug 'tpope/vim-repeat' " allows . to repeat previous two commands
Plug 'tpope/vim-sensible' " sensible vim settings we can all agree on
Plug 'junegunn/goyo.vim', { 'for': 'markdown' } " distraction free markdown writing
Plug 'ntpeters/vim-better-whitespace'
Plug 'scrooloose/nerdtree'
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'lifepillar/vim-mucomplete'
Plug 'wellle/tmux-complete.vim'  " auto complete from adjacent tmux panes
Plug 'tpope/vim-rhubarb' " omni completion from github
" Plug 'OmniSharp/omnisharp-vim', { 'do': ' cd server && xbuild' }

Plug 'christoomey/vim-tmux-navigator' " navigating tmux panes and vim buffers alike
Plug 'tpope/vim-git' " git syntax
Plug 'tpope/vim-markdown', {'for': 'markdown'} " markdown specific syntax settings
Plug 'moorereason/vim-markdownfmt'
Plug 'tmux-plugins/vim-tmux' " syntax for tmux.conf
" Plug 'ternjs/tern_for_vim', { 'do': 'npm i' }
Plug 'othree/yajs.vim', { 'for': ['javascript', 'javascript.jsx'] } " ES6 and ES7
Plug 'othree/es.next.syntax.vim', {'for': ['javascript','javascript.jsx']} " ES6 and ES7
Plug 'kchmck/vim-coffee-script', {'for': ['coffee', 'javascript']} " coffeescript syntax highlighting
Plug 'cespare/vim-toml'
Plug 'Quramy/tsuquyomi', {'for': 'typescript'} " TypeScript
Plug 'HerringtonDarkholme/yats.vim', {'for': 'typescript'} " TypeScript
" Plug 'mxw/vim-jsx', { 'for': ['javascript','javascript.jsx'] } " JSX support
Plug 'jparise/vim-graphql' " GraphQL
Plug 'elzr/vim-json', { 'for': 'json' } " JSON support
Plug 'fatih/vim-go', { 'do': ':GoInstallBinaries', 'for': 'go' } " Golang
Plug 'cakebaker/scss-syntax.vim' " Sass
Plug 'vim-ruby/vim-ruby' " Ruby
Plug 'tclem/vim-arduino' " Arduino
Plug 'hashivim/vim-hashicorp-tools' " HCL
Plug 'fatih/vim-hclfmt'
Plug 'ekalinin/Dockerfile.vim' " Docker
" Plug 'MarcWeber/vim-addon-mw-utils'

call plug#end()

if has("termguicolors")
    set termguicolors
endif

colorscheme molokai
let g:airline_theme='badwolf'
let g:airline_powerline_fonts = 1

augroup vimrcEx
    autocmd!
    " http://vim.wikia.com/wiki/Detect_window_creation_with_WinEnter
    autocmd VimEnter * autocmd WinEnter * let w:created=1
    autocmd VimEnter * let w:created=1

    autocmd VimResized * wincmd =
    " Disable paste mode on leaving insert mode.
    autocmd InsertLeave * set nopaste

    autocmd BufWritePre * StripWhitespace

    autocmd BufReadPost *
        \ if &ft != 'gitcommit' && line("'\"") > 0 && line("'\"") <= line("$") |
        \   exe "normal g`\"" |
        \ endif
augroup END

set background=dark
set clipboard+=unnamed
set hidden
set nopaste
set noshowmode
set noswapfile
set nojoinspaces           " don't autoinsert two spaces after '.', '?', '!' for join command
set relativenumber number
set tabstop=2 shiftwidth=2 expandtab
set laststatus=2
set wrap linebreak nolist
set nofoldenable           " no folds
set undofile
set undodir="$HOME/.VIM_UNDO_FILES"
set nobackup               " disable automatic creation of backup files
set nowritebackup          " changes default behavior of saving files to 'write,delete,rename'
set noswapfile             " http://robots.thoughtbot.com/post/18739402579/global-gitignore#comment-458413287
set scrolloff=10           " number of lines to show below the cursor before the buffer scrolls down
set noshowcmd
set smarttab
set smartindent            " be smart about it
set wrapmargin=8           " wrap lines when coming within n characters from side
set formatoptions+=n,1     " support for numbered/bullet lists
set wildmode=longest:full,full
set wildignore+=.git,*.jpg,*.png,*.gif,*.jpeg,.DS_Store
set whichwrap+=<,>,h,l,[,] " backspace and cursor keys wrap to
set shortmess=filtIoOAc    " shorten messages
set showmatch              " brackets/braces that is
set mat=7                  " duration to show matching brace (1/10 sec)
set ignorecase             " ignore case when searching
set nocursorcolumn         " speed up syntax highlighting
set nocursorline
set nohlsearch             " don't highlight searches
set visualbell             " shut up
set noerrorbells           " ditto
set splitbelow
set splitright
set textwidth=80

set spellcapcheck=
set spellfile=$HOME/.vim/spell/.vim-spell-en.utf-8.add

if has('linebreak')
  let &showbreak='â†³ '      " DOWNWARDS ARROW WITH TIP RIGHTWARDS (U+21B3, UTF-8: E2 86 B3)
endif

autocmd FileType ruby,eruby,yaml set iskeyword+=!,?
autocmd FileType ruby,eruby,yaml set isfname=_,-,48-57,A-Z,a-z,/
autocmd BufNewFile,BufRead *.rb setlocal sw=2 smartindent ts=2
autocmd BufNewFile,BufRead *.vim setlocal noet ts=4 sw=4 sts=4
autocmd BufNewFile,BufRead *.txt setlocal noet ts=4 sw=4
autocmd BufNewFile,BufRead *.md setlocal spell noet ts=4 sw=4

autocmd FileType gitcommit setlocal spell
autocmd FileType dockerfile,gitconfig,sh,toml set noexpandtab
autocmd FileType terraform setlocal commentstring=#\ %s

autocmd BufNewFile,BufRead *.go setlocal noet ts=4 sw=4 sts=4
autocmd BufNewFile,BufRead *.ino set filetype=c
autocmd BufNewFile,BufRead *.svg set filetype=xml
autocmd BufNewFile,BufRead .eslintrc set filetype=json
autocmd BufNewFile,BufRead *.graphcool set filetype=graphql
autocmd BufNewFile,BufRead .babelrc set filetype=json
autocmd BufNewFile,BufRead .jshintrc set filetype=json

" autocmd FileType javascript set formatprg=prettier\ --stdin\ --trailing-comma\ es5
autocmd BufWritePre *.js Neoformat
" autocmd FileType javascript set formatprg=prettier\ --stdin\ --parser\ flow\ --single-quote\ --trailing-comma\ es5

noremap H ^
noremap L g_
noremap J 5j
noremap K 5k

map <C-d> :NERDTreeToggle<CR>
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

nnoremap <Left> :echoe "Use h"<CR>
nnoremap <Right> :echoe "Use l"<CR>
nnoremap <Up> :echoe "Use k"<CR>
nnoremap <Down> :echoe "Use j"<CR>

nnoremap <silent> <Leader>wi :StripWhitespace<CR>

vmap <Leader><Bslash> :EasyAlign*<Bar><Enter>
nnoremap <leader>c :ccl <bar> lcl<CR>

let g:multi_cursor_quit_key='<C-c>'
nnoremap <C-c> :call multiple_cursors#quit()<CR>

command! -nargs=* -complete=file Preview call commands#preview(<f-args>)

let g:gitgutter_map_keys = 0
let g:go_textobj_include_function_doc = 1
let g:go_fmt_command = "goimports"

let g:jsx_ext_required = 0
let g:vim_json_syntax_conceal = 0

let g:markdown_fenced_languages = ['css', 'javascript', 'js=javascript', 'json=javascript', 'stylus', 'html', 'go', 'ruby']
let g:markdownfmt_command = 'mdfmt'
let g:better_whitespace_filetypes_blacklist = ['markdown', 'md']

let g:netrw_list_hide = '\(^\|\s\s\)\zs\.\S\+'
let g:netrw_banner=0        " disable annoying banner



