scriptencoding utf-8
"
"        _
" __   _(_)_ __ ___  _ __ ___
" \ \ / / | '_ ` _ \| '__/ __|
"  \ V /| | | | | | | | | (__
" (_)_/ |_|_| |_| |_|_|  \___|
"
"
" VIMPATH
let $VIMPATH=expand('$HOME/.vim')

if empty(glob("~/.config/nvim/autoload/plug.vim"))
  silent !curl -fLo ~/.config/nvim/autoload/plug.vim --create-dirs
  \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('$VIMPATH/plugged')
  " syntax highlighting
  Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
  Plug 'nvim-treesitter/playground'

  " lsp
  Plug 'neoclide/coc.nvim'

  " file and other entity search
  Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
  Plug 'junegunn/fzf.vim'

  " utilities
  Plug 'editorconfig/editorconfig-vim'
  Plug 'tpope/vim-surround'
  Plug 'tpope/vim-commentary'
  Plug 'tpope/vim-repeat'
  Plug 'tpope/vim-unimpaired'
  Plug 'tpope/vim-fugitive'
    nmap     <Leader>gs :Gstatus<CR>gg<c-n>

  Plug 'rhysd/git-messenger.vim'
    nmap <leader>cm <Plug>(git-messenger)

  Plug 'tpope/vim-rhubarb'
  Plug 'junegunn/gv.vim'
    function! s:gv_expand()
      let line = getline('.')
      GV --name-status
      call search('\V'.line, 'c')
      normal! zz
    endfunction
    autocmd! FileType GV nnoremap <buffer> <silent> + :call <sid>gv_expand()<cr>

  Plug 'mbbill/undotree', { 'on': 'UndotreeToggle' }
    let g:undotree_WindowLayout = 2
    nnoremap U :UndotreeToggle<CR>

  Plug 'AndrewRadev/splitjoin.vim'
    let g:splitjoin_split_mapping = ''
    let g:splitjoin_join_mapping = ''
    nnoremap gss :SplitjoinSplit<cr>
    nnoremap gsj :SplitjoinJoin<cr>

  Plug 'Yggdroot/indentLine'
    autocmd! User indentLine doautocmd indentLine Syntax
    let g:indentLine_char = '│'
    let g:indentLine_color_term = 239
    let g:indentLine_color_gui = '#333333'
  Plug 'lukas-reineke/indent-blankline.nvim'
  Plug 'mhinz/vim-signify'
    let g:signify_vcs_list = ['git']
    let g:signify_sign_add          = '│'
    let g:signify_sign_change       = '│'
    let g:signify_sign_changedelete = '│'

  Plug 'justinmk/vim-dirvish'
  Plug 'kristijanhusak/vim-dirvish-git'
  Plug 'junegunn/vim-easy-align'
    xmap ga <Plug>(EasyAlign)
    nmap ga <Plug>(EasyAlign)
  Plug 'alvan/vim-closetag'
    let g:closetag_filenames = '*.js,*.jsx,*.tsx,*.html'

  Plug 'RRethy/vim-illuminate'
  Plug 'voldikss/vim-floaterm'
  Plug 'christoomey/vim-tmux-navigator'
  Plug 'wellle/tmux-complete.vim'
  Plug 'puremourning/vimspector'

  " language
  Plug 'hashivim/vim-terraform'
    let g:terraform_align = 1
    let g:terraform_fmt_on_save = 1
  Plug 'pantharshit00/vim-prisma', { 'for': 'prisma' }
  Plug 'pangloss/vim-javascript', { 'for': ['typescript', 'javascript']}
  Plug 'leafgarland/typescript-vim', { 'for': ['typescript']}
  Plug 'peitalin/vim-jsx-typescript', { 'for': ['typescript']}
  Plug 'jxnblk/vim-mdx-js'
  Plug 'styled-components/vim-styled-components', { 'for': ['typescript', 'javascript'] }
  Plug 'rust-lang/rust.vim', { 'for': 'rust' }
  Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries', 'for': 'golang' }
  Plug 'tpope/vim-rails', { 'for': 'ruby' }

  " statusline and theme
  Plug 'morhetz/gruvbox'
  hi! typescriptLineComment ctermfg=DarkGrey guifg=DarkGrey
  map <F10> :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
  \ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
  \ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>
  Plug 'itchyny/lightline.vim'

    let g:lightline = {
    \ 'colorscheme': 'gruvbox',
    \ 'mode_map': {
    \ 'n' : 'N',
    \ 'i' : 'I',
    \ 'R' : 'R',
    \ 'v' : 'V',
    \ 'V' : 'VL',
    \ "\<C-v>": 'VB',
    \ 'c' : 'C',
    \ 's' : 'S',
    \ 'S' : 'SL',
    \ "\<C-s>": 'SB',
    \ 't': 'T',
    \ },
    \ 'active': {
    \    'left': [['mode','paste'],['gitbranch','readonly','filename','filetype','modified']],
    \   'right': [['cocstatus']]
    \ },
    \ 'component_function': {
    \   'gitbranch': 'fugitive#head'
    \ },
    \ 'component_expand': {
    \   'cocstatus': 'StatusDiagnostic'
    \ },
    \ 'component_type': {
    \  'cocstatus': 'raw'
    \ }
    \ }

    autocmd User CocDiagnosticChange call lightline#update()

call plug#end()

syntax enable

let mapleader = ' '
set exrc
set guicursor=
set relativenumber
set number
set nohlsearch
set hidden
set cursorline
set noerrorbells
set tabstop=2
set softtabstop=2
set shiftwidth=2
set expandtab
set smartindent
set autoindent
set nowrap
set noswapfile
set nobackup
set undodir=~/.vim/undodir
set undofile
set incsearch
set termguicolors
set scrolloff=8
set shell=zsh
set noshowmode
set completeopt=menuone,noinsert,noselect
set signcolumn=yes
set splitbelow
set splitright
set cmdheight=1
set updatetime=50
set shortmess+=c
set clipboard=unnamedplus               " Copy paste between vim and everything else
set nojoinspaces
set shada=!,'1000,<50,s10,h
set foldmethod=marker
set foldlevel=0
set modelines=1

"TODO I'm not sure about the following, will need to test
" set formatoptions-=a    " Auto formatting is BAD.
" set formatoptions-=t    " Don't auto format my code. I got linters for that.
" set formatoptions+=c    " In general, I like it when comments respect textwidth
" set formatoptions+=q    " Allow formatting comments w/ gq
" set formatoptions-=o    " O and o, don't continue comments
" set formatoptions+=r    " But do continue when pressing enter.
" set formatoptions+=n    " Indent past the formatlistpat, not underneath it.
" set formatoptions+=j    " Auto-remove comments if possible.
" set formatoptions-=2    " I'm not in gradeschool anymore

if has('linebreak')
  let &showbreak='↳ '                 " DOWNWARDS ARROW WITH TIP RIGHTWARDS (U+21B3, UTF-8: E2 86 B3)
endif

lua <<EOF
require('nvim-treesitter.configs').setup {
  highlight = { enable = true },
  ensure_installed = "maintained",
  custom_captures = {
    ["@comment"] = "Comment",
  },
}
local parser_config = require "nvim-treesitter.parsers".get_parser_configs()
parser_config.solidity = {
  install_info = {
    url = "~/Code/tree-sitter-solidity", -- local path or git repo
    files = {"src/parser.c"}
  },
  filetype = "sol" -- if filetype does not agrees with parser name
}
EOF

colorscheme gruvbox
if exists('+termguicolors')
  let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
  let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
endif
hi! link Error Comment

" map jj to <ESC> so I don't have to reach so far
inoremap jj <ESC>

augroup Whitespace
  autocmd!
  autocmd BufWritePre * %s/\s\+$//e
augroup END

augroup highlight_yank
    autocmd!
    autocmd TextYankPost * silent! lua require'vim.highlight'.on_yank({timeout = 40})
augroup END

" Call ":Reload" to apply the latest .vimrc contents
command! Reload execute "source ~/.vimrc"

" Allow saving of files as sudo when I forgot to start vim using sudo.
cmap w!! w !sudo tee > /dev/null %

noremap H ^
noremap L g_
noremap J 5j
noremap K 5k

noremap <S-Tab> :tabp<CR>
noremap <Tab> :tabn<CR>

vmap < <gv
vmap > >gv

" Disable useless arrow keys
inoremap <Down> <NOP>
inoremap <Up> <NOP>
inoremap <Left> <NOP>
inoremap <Right> <NOP>
nnoremap <Left> :echoe "Use h"<CR>
nnoremap <Right> :echoe "Use l"<CR>
nnoremap <Up> :echoe "Use k"<CR>
nnoremap <Down> :echoe "Use j"<CR>
vnoremap J :m '>+1<CR>gv=gv
vnoremap K :m '<-2<CR>gv=gv

augroup GeneralAutocmds
  autocmd!

  autocmd TermOpen * set nonumber norelativenumber
  autocmd TermLeave * set number relativenumber

  autocmd VimResized * execute "normal! \<c-w>="

  " http://vim.wikia.com/wiki/Detect_window_creation_with_WinEnter
  autocmd VimEnter * autocmd WinEnter * let w:created=1
  autocmd VimEnter * let w:created=1
  autocmd VimResized * wincmd =
  autocmd BufReadPost *
        \ if &ft != 'gitcommit' && line("'\"") > 0 && line("'\"") <= line("$") |
        \   exe "normal g`\"" |
        \ endif

  " Disable paste mode on leaving insert mode.
  autocmd InsertLeave * set nopaste
  autocmd BufWritePost */spell/*.add silent! :mkspell! %
augroup END

augroup FileTypes
  command! -nargs=* -complete=help Help vertical belowright help <args>
  autocmd FileType help wincmd L
  autocmd TermOpen term://* set filetype=term

  autocmd BufNewFile,BufRead .tmux.conf*,tmux.conf* setf tmux
  autocmd BufNewFile,BufRead .nginx.conf*,nginx.conf* setf nginx
  autocmd BufRead,BufNewFile gitconfig set syntax=gitconfig
  autocmd BufNewFile,BufRead .{babel,eslint,stylelint,prettier,jshint}rc,.tern-* set filetype=json
  autocmd BufNewFile,BufRead {Gemfile,Brewfile,Rakefile,Vagrantfile,Thorfile,Procfile,Guardfile,config.ru,*.rake} set filetype=ruby
  autocmd BufNewFile,BufRead *.prisma setfiletype prisma
  autocmd BufNewFile,BufRead *.hcl setf conf

  autocmd BufNewFile,BufRead .tmux.conf*,tmux.conf* setf tmux
  autocmd BufNewFile,BufRead *.ino setlocal noet ts=4 sw=4 sts=4
  autocmd BufNewFile,BufRead *.txt setlocal noet ts=4 sw=4
  autocmd BufNewFile,BufRead *.md setlocal noet ts=4 sw=4
  autocmd BufNewFile,BufRead *.html setlocal noet ts=4 sw=4
  autocmd BufNewFile,BufRead *.vim setlocal expandtab shiftwidth=2 tabstop=2
  autocmd BufNewFile,BufRead *.hcl setlocal expandtab shiftwidth=2 tabstop=2
  autocmd BufNewFile,BufRead *.sh setlocal expandtab shiftwidth=2 tabstop=2
  autocmd BufNewFile,BufRead *.proto setlocal expandtab shiftwidth=2 tabstop=2

  autocmd FileType go setlocal noexpandtab tabstop=4 shiftwidth=4
  autocmd FileType yaml setlocal expandtab shiftwidth=2 tabstop=2
  autocmd FileType json setlocal expandtab shiftwidth=2 tabstop=2
  autocmd FileType ruby setlocal expandtab shiftwidth=2 tabstop=2
augroup END

let g:coc_global_extensions = [
  \ 'coc-json',
  \ 'coc-git',
  \ 'coc-pairs',
  \ 'coc-yaml',
  \ 'coc-lists',
  \ 'coc-rls',
  \ 'coc-go',
  \ 'coc-sh',
  \ 'coc-phpls',
  \ 'coc-inline-jest',
  \ 'coc-marketplace',
  \ 'coc-highlight',
  \ 'coc-vimlsp',
  \ 'coc-tailwindcss',
  \ 'coc-tabnine'
  \ ]

if isdirectory('./node_modules') && isdirectory('./node_modules/typescript')
  let g:coc_global_extensions += ['coc-tsserver']
endif

if isdirectory('./node_modules') && isdirectory('./node_modules/styled-components')
  let g:coc_global_extensions += ['coc-styled-components']
endif

if isdirectory('./node_modules') && isdirectory('./node_modules/jest')
  let g:coc_global_extensions += ['coc-jest']
endif

if isdirectory('./node_modules') && isdirectory('./node_modules/flow-bin')
  let g:coc_global_extensions += ['coc-flow']
endif

if isdirectory('./node_modules') && isdirectory('./node_modules/prettier')
  let g:coc_global_extensions += ['coc-prettier']
endif

if isdirectory('./node_modules') && isdirectory('./node_modules/eslint')
  let g:coc_global_extensions += ['coc-eslint']
endif

inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" To make <cr> select the first completion item and confirm the completion when no item has been selected:
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm() : "\<C-g>u\<CR>"

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

command! -nargs=0 JestCurrent :call  CocAction('runCommand', 'jest.fileTest', ['%'])
nmap <silent> <leader>t :JestCurrent<CR>

" Use K to show documentation in preview window.
nnoremap <silent> H :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current buffer.
nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)

hi SignColumn ctermbg=235 guibg=#282828
hi CocErrorSign ctermfg=167 ctermbg=235 guibg=#282828 guifg=#fb4934
hi CocWarningSign ctermbg=235 ctermfg=208 guibg=#282828 guifg=#fe8019
hi CocInfoSign ctermbg=235 ctermfg=214 guibg=#282828 guifg=#fabd2f
hi CocHintSign ctermbg=235 ctermfg=109 guibg=#282828 guifg=#83a598

hi StatuslineOK ctermfg=white ctermbg=34 guifg=#ffffff guibg=#00af00
hi StatuslineError ctermfg=white ctermbg=124 guifg=#ffffff guibg=#af0000
hi StatuslineWarn ctermfg=235 ctermbg=172 guifg=#282828 guibg=#d78700

" FZF

let $FZF_DEFAULT_COMMAND = 'rg --files --hidden --glob "!.git/*"'
let $FZF_DEFAULT_OPTS='--color=dark --height=30% --layout=reverse --margin=1,1 --color=fg:15,bg:-1,hl:1,fg+:#ffffff,bg+:0,hl+:1 --color=info:0,pointer:12,marker:4,spinner:11,header:-1'
let g:fzf_preview_use_dev_icons = 1
let g:fzf_layout = { 'window': { 'width': 0.8, 'height': 0.8 } }
let g:fzf_buffers_jump = 1
let g:fzf_action = {
  \ 'ctrl-l': 'vsplit',
  \ 'ctrl-x': 'split',
  \ 'enter': 'tab split',
  \ }

function! s:find_git_root()
  return system('git rev-parse --show-toplevel 2> /dev/null')[:-2]
endfunction

command! ProjectFiles execute 'Files' s:find_git_root()

nmap // :BLines<CR>
nmap ?? :Rg!<CR>
nmap <C-f> :ProjectFiles<CR>
nmap <C-d> :Files ~/.dotfiles<CR>
nmap cc :Commands!<CR>

function! MinExec(cmd)
	redir @a
	exec printf('silent %s',a:cmd)
	redir END
	return @a
endfunction

function! GetHighlightGroups()
	let lines=MinExec('hi')
	let lines=split(lines,'\n')
	return lines
endfunction

function! StatusDiagnostic() abort
  let info = get(b:, 'coc_diagnostic_info', {})
  let total_errors = get(info, 'error', 0) + get(info, 'warning', 0)
  if total_errors == 0 | return '%#StatuslineOK#'.' '.'OK'.' ' | endif
  let msgs = []
  if get(info, 'error', 0)
    call add(msgs, '%#StatuslineError#'.' '.'E'.info['error'] .' ')
  endif
  if get(info, 'warning', 0)
    call add(msgs, '%#StatuslineWarn#'.' '.'W'.info['warning'].' ')
  endif
  return join(msgs, ' ')
endfunction
