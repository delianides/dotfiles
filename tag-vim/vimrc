" vim: fdm=marker foldlevel=98 foldenable sw=4 ts=4 sts=4
"        _
" __   _(_)_ __ ___  _ __ ___
" \ \ / / | '_ ` _ \| '__/ __|
"  \ V /| | | | | | | | | (__
" (_)_/ |_|_| |_| |_|_|  \___|
"
" VIMPATH
let $VIMPATH=expand('$HOME/.vim')
" Leader key
let mapleader = ' '
" exit to normal mode with 'jj', so i don't always have to hit the escape key
inoremap jj <ESC>
" No need for ex mode
nnoremap Q <nop>
" recording macros is not my thing
map q <Nop>
" Allow saving of files as sudo when I forgot to start vim using sudo.
cmap w!! w !sudo tee > /dev/null %

call plug#begin('~/.vim/plugged')

Plug '/usr/local/opt/fzf' | Plug 'junegunn/fzf.vim' " FuzzyFind
Plug 'airblade/vim-gitgutter' " show git changes in column
Plug 'w0rp/ale' " async linting + formatting tool
Plug 'AndrewRadev/splitjoin.vim' "join things together
Plug 'jeffkreeftmeijer/vim-numbertoggle' " when using splits show absolute number for inactive
" Plug 'jiangmiao/auto-pairs'
Plug 'junegunn/vim-easy-align'
Plug 'Raimondi/delimitMate' "closing brackets or braces
Plug 'tpope/vim-endwise', { 'for': ['ruby'] } " closes blocks in certain languages
Plug 'tpope/vim-fugitive' " git commands in vim
Plug 'tpope/vim-vinegar' " netrw play nicely
Plug 'tpope/vim-sensible' " sensible vim defaults
Plug 'tpope/vim-surround' " surround vim objects with a string
Plug 'tpope/vim-commentary' " universal comment application
Plug 'tpope/vim-repeat' " allows . to repeat previous commands
Plug 'tpope/vim-unimpaired' " Moving around
Plug 'janko-m/vim-test' " run tests
Plug 'Yggdroot/indentLine'
Plug 'RRethy/vim-illuminate'
Plug 'scrooloose/nerdtree'
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'wellle/tmux-complete.vim'  " auto complete from adjacent tmux panes
Plug 'christoomey/vim-tmux-navigator' " navigating tmux panes and vim buffers alike
Plug 'wakatime/vim-wakatime'

" Plug 'sheerun/vim-polyglot' " includes most language packs
Plug 'fatih/vim-go'
Plug 'tpope/vim-rails', { 'for': ['ruby']} " Ruby on Rails
Plug 'jparise/vim-graphql' " GraphQL
Plug 'maxmellon/vim-jsx-pretty', { 'for': [ 'javascript', 'jsx' ]}
Plug 'leafgarland/typescript-vim', { 'for': [ 'typescript', 'tsx' ]}
Plug 'peitalin/vim-jsx-typescript', { 'for': ['typescript', 'tsx']}
" Plug 'HerringtonDarkholme/yats.vim'
Plug 'ap/vim-css-color' " CSS Hex Color
" Plug 'fatih/vim-hclfmt', { 'for': ''}

Plug 'nsf/gocode', { 'rtp': 'vim', 'do': '~/.vim/plugged/gocode/vim/symlink.sh' }

" For async completion
Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
Plug 'mhartington/nvim-typescript', {'do': './install.sh'}

Plug 'fatih/molokai'
" Plug 'crusoexia/vim-monokai'
Plug 'itchyny/lightline.vim'
Plug 'maximbaz/lightline-ale'

call plug#end()
syntax on
colorscheme molokai
let g:rehash256 = 1
let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
set termguicolors

let g:lightline = {
      \ 'colorscheme': 'powerline',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'gitbranch', 'readonly', 'filename', 'modified' ] ],
      \   'right': [[ 'linter_checking', 'linter_errors', 'linter_warnings', 'linter_ok' ]]
      \ },
      \ 'component_function': {
      \   'gitbranch': 'fugitive#head',
      \ },
      \ 'component_expand': {
      \  'linter_checking': 'lightline#ale#checking',
      \  'linter_warnings': 'lightline#ale#warnings',
      \  'linter_errors': 'lightline#ale#errors',
      \  'linter_ok': 'lightline#ale#ok',
      \ },
      \ 'component_type': {
      \     'linter_checking': 'left',
      \     'linter_warnings': 'warning',
      \     'linter_errors': 'error',
      \     'linter_ok': 'left',
      \ }
      \ }

augroup vimrcEx
autocmd!
" http://vim.wikia.com/wiki/Detect_window_creation_with_WinEnter
autocmd VimEnter * autocmd WinEnter * let w:created=1
autocmd VimEnter * let w:created=1
autocmd VimResized * wincmd =
autocmd BufReadPost *
    \ if &ft != 'gitcommit' && line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal g`\"" |
    \ endif
augroup END

autocmd VimEnter hi xmlAttrib cterm=italic ctermfg=214

set clipboard=unnamed
set hidden
set noshowmode
set noswapfile
set nojoinspaces           " don't autoinsert two spaces after '.', '?', '!' for join command
set relativenumber number
set tabstop=2 shiftwidth=2 expandtab
set laststatus=2
set wrap linebreak nolist
set nofoldenable           " no folds
set undofile
set undodir="$HOME/.VIM_UNDO_FILES"
set nobackup               " disable automatic creation of backup files
set nowritebackup          " changes default behavior of saving files to 'write,delete,rename'
set noswapfile             " http://robots.thoughtbot.com/post/18739402579/global-gitignore#comment-458413287
set scrolloff=10           " number of lines to show below the cursor before the buffer scrolls down
set noshowcmd
set smarttab
set autoindent
set smartindent            " be smart about it
set wrapmargin=8           " wrap lines when coming within n characters from side
set formatoptions+=n,1     " support for numbered/bullet lists
set formatoptions+=j
set wildmode=longest:full,full
set wildignore+=.git,*.jpg,*.png,*.gif,*.jpeg,.DS_Store
set whichwrap+=<,>,h,l,[,] " backspace and cursor keys wrap to
set shortmess=filtIoOAc    " shorten messages
set showmatch              " brackets/braces that is
set mat=7                  " duration to show matching brace (1/10 sec)
set ignorecase             " ignore case when searching
set nocursorcolumn         " speed up syntax highlighting
set nocursorline
set nohlsearch             " don't highlight searches
set visualbell             " shut up
set noerrorbells           " ditto
set splitbelow
set splitright
set textwidth=80
set spellcapcheck=
set spellfile=$HOME/.vim/spell/.vim-spell-en.utf-8.add

if has('linebreak')
  let &showbreak='↳ '      " DOWNWARDS ARROW WITH TIP RIGHTWARDS (U+21B3, UTF-8: E2 86 B3)
endif

highlight Comment cterm=italic
autocmd FileType ruby,eruby,yaml set iskeyword+=!,?
autocmd FileType ruby,eruby,yaml set isfname=_,-,48-57,A-Z,a-z,/
autocmd BufNewFile,BufRead *.rb setlocal sw=2 smartindent ts=2
autocmd BufNewFile,BufRead *.vim setlocal noet ts=4 sw=4 sts=4
autocmd BufNewFile,BufRead *.txt setlocal noet ts=4 sw=4
autocmd BufNewFile,BufRead *.md setlocal spell noet ts=4 sw=4

autocmd FileType gitcommit setlocal spell
autocmd FileType dockerfile,gitconfig,sh,toml set noexpandtab
autocmd FileType terraform setlocal commentstring=#\ %s

autocmd BufNewFile,BufRead *.go setlocal noet ts=4 sw=4 sts=4
autocmd BufNewFile,BufRead *.ino set filetype=c
autocmd BufNewFile,BufRead *.svg set filetype=xml
autocmd BufNewFile,BufRead .eslintrc set filetype=json
autocmd BufNewFile,BufRead .babelrc set filetype=json
autocmd BufNewFile,BufRead .jshintrc set filetype=json

" Smart paste
" nnoremap <C-v> "+P=']
" inoremap <C-v> <C-o>"+P<C-o>=']
" Disable paste mode on leaving insert mode.
autocmd InsertLeave * set nopaste

noremap H ^
noremap L g_
noremap J 5j
noremap K 5k

vmap < <gv
vmap > >gv

" Disable useless arrow keys
inoremap <Up> <NOP>
inoremap <Down> <NOP>
inoremap <Left> <NOP>
inoremap <Right> <NOP>
nnoremap <Left> :echoe "Use h"<CR>
nnoremap <Right> :echoe "Use l"<CR>
nnoremap <Up> :echoe "Use k"<CR>
nnoremap <Down> :echoe "Use j"<CR>

" Bubble single lines
nmap <C-K> [e
nmap <C-J> ]e
" Bubble multiple lines
vmap <C-K> [egv
vmap <C-J> ]egv

nnoremap <silent> <Leader>wi :StripWhitespace<CR>

vmap <Leader><Bslash> :EasyAlign*<Bar><Enter>
xmap ga <Plug>(EasyAlign)
nmap ga <Plug>(EasyAlign)

nmap <leader>d :NERDTreeToggle<CR>
nmap <leader>tf :NERDTreeFind<CR>
let NERDTreeShowHidden = 1
let NERDTreeIgnore = ['\.o$', '\~', '\.pyc$', '\.git$', '\.hg$', '\.DS_Store']
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

nmap <silent> <leader>n :TestNearest<CR>
nmap <silent> <leader>f :TestFile<CR>
nmap <silent> <leader>a :TestSuite<CR>


set signcolumn=yes
let g:gitgutter_map_keys = 0
let g:conflict_marker_enable_mappings = 0
let g:gitgutter_sign_added = '│'
let g:gitgutter_sign_modified = '│'
let g:gitgutter_sign_removed = '│'
let g:gitgutter_sign_removed_first_line = '│'
let g:gitgutter_sign_modified_removed = '│'

let g:go_textobj_include_function_doc = 1
let g:go_doc_keywordprg_enabled = 0
let g:go_fmt_command = "goimports"

" let g:polyglot_disabled = ['typescript', 'markdown']
let g:flow#showquickfix = 0
let g:typescript_indent_disable = 1
let g:tsuquyomi_disable_quickfix = 1

let g:tmux_navigator_disable_when_zoomed = 1
let g:vim_jsx_pretty_colorful_config = 1
let g:vim_json_syntax_conceal = 0

let g:vim_markdown_fenced_languages = ['css', 'javascript', 'js=javascript', 'json=javascript', 'stylus', 'html', 'go', 'ruby']
let g:better_whitespace_filetypes_blacklist = ['markdown', 'md']

let g:netrw_list_hide = '\(^\|\s\s\)\zs\.\S\+'
let g:netrw_banner=0        " disable annoying banner

let g:deoplete#enable_at_startup = 1

