//
// For information on binding keys, see the Zed
// documentation: https://zed.dev/docs/key-bindings
//
// To see the default key bindings run `zed: open default keymap`
// from the command palette.
[
  {
    "context": "Editor && VimControl && !VimWaiting && !menu",
    "bindings": {
      "ctrl-w z": "workspace::ToggleZoom",
      "ctrl-w t": "terminal_panel::ToggleFocus",
      "g ]": "editor::GoToDiagnostic",
      "g [": "editor::GoToPreviousDiagnostic",
      "g r": "editor::FindAllReferences",
      "shift-k": "editor::Hover",
      "space l a": "editor::ToggleCodeActions",
      "space l r": "editor::Rename",
      "space l f": "editor::Format",
      "space l l": "diagnostics::Deploy",
      "g c c": "editor::ToggleComments",
      "space f": "file_finder::Toggle",
      "space o": "tab_switcher::Toggle",
      "space e": "workspace::ToggleLeftDock",
      "space p": "outline::Toggle",
      "space v": "editor::GoToDefinitionSplit"
    }
  },
  {
    "context": "Editor && vim_mode == insert && !menu",
    "bindings": {
      "j j": "vim::NormalBefore"
    }
  },
  {
    "context": "Editor && vim_mode == visual && !VimWaiting && !VimObject",
    "bindings": {
      "shift-j": "editor::MoveLineDown",
      "shift-k": "editor::MoveLineUp"
    }
  },
  {
    "context": "Terminal",
    "bindings": {
      "ctrl-w z": "workspace::ToggleZoom",
      "ctrl-w t": "terminal_panel::ToggleFocus"
    }
  },
  {
    "context": "EmptyPane || SharedScreen || vim_mode == normal",
    "bindings": {
      // ", f b": "tab_switcher::Toggle",
      ", f b": ["file_finder::Toggle", { "separate_history": true }],
      ", f i": "file_finder::Toggle",
      ", f o": "projects::OpenRecent",
      ", r t": ["editor::SpawnNearestTask", { "reveal": "no_focus" }],
      ", r l": "task::Rerun",
      ", r e": [
        "task::Rerun",
        {
          "reevaluate_context": true
        }
      ],
      "ctrl-s": "projects::OpenRecent"
    }
  },
  {
    "context": "Editor && vim_mode == normal",
    "bindings": {
      "shift-l": "pane::ActivateNextItem",
      "shift-h": "pane::ActivatePreviousItem"
    }
  },
  {
    "context": "Editor && vim_mode == visual",
    "bindings": {
      "g c": "editor::ToggleComments"
    }
  },
  {
    "context": "Terminal",
    "bindings": {
      "ctrl-b z": "workspace::ToggleZoom",
      "ctrl-u": "terminal::Clear",
      "ctrl-l": "workspace::ActivatePaneRight",
      "ctrl-h": "workspace::ActivatePaneLeft",
      "ctrl-j": "workspace::ActivatePaneDown",
      "ctrl-k": "workspace::ActivatePaneUp"
    }
  },
  {
    "context": "Editor",
    "bindings": {
      "cmd-[": "editor::Outdent",
      "cmd-]": "editor::Indent",
      "cmd-alt-up": "editor::AddSelectionAbove",
      "cmd-ctrl-p": "editor::AddSelectionAbove",
      "cmd-alt-down": "editor::AddSelectionBelow",
      "cmd-ctrl-n": "editor::AddSelectionBelow",
      "cmd-d": [
        "editor::SelectNext",
        {
          "replace_newest": false
        }
      ],
      "ctrl-cmd-d": [
        "editor::SelectPrevious",
        {
          "replace_newest": false
        }
      ],
      "cmd-k cmd-d": [
        "editor::SelectNext",
        {
          "replace_newest": true
        }
      ],
      "cmd-k ctrl-cmd-d": [
        "editor::SelectPrevious",
        {
          "replace_newest": true
        }
      ],
      "cmd-/": [
        "editor::ToggleComments",
        {
          "advance_downwards": false
        }
      ],
      "alt-up": "editor::SelectLargerSyntaxNode",
      "alt-down": "editor::SelectSmallerSyntaxNode",
      "cmd-u": "editor::UndoSelection",
      "cmd-shift-u": "editor::RedoSelection",
      "f8": "editor::GoToDiagnostic",
      "shift-f8": "editor::GoToPreviousDiagnostic",
      "f2": "editor::Rename",
      "f12": "editor::GoToDefinition",
      "alt-f12": "editor::GoToDefinitionSplit",
      "cmd-f12": "editor::GoToTypeDefinition",
      "alt-cmd-f12": "editor::GoToTypeDefinitionSplit",
      "alt-shift-f12": "editor::FindAllReferences",
      "ctrl-m": "editor::MoveToEnclosingBracket",
      "alt-cmd-[": "editor::Fold",
      "alt-cmd-]": "editor::UnfoldLines",
      "ctrl-space": "editor::ShowCompletions",
      "cmd-.": "editor::ToggleCodeActions"
    }
  }
]
