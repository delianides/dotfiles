#!/bin/bash
# vim: tw=0
# from https://github.com/gabebw/dotfiles/blob/main/install.sh

set -eo pipefail

color() {
  local colornumber="$1"
  shift
  tput setaf "$colornumber"
  echo "$*"
  tput sgr0
}

# blue = 4
# magenta = 5
red(){ color 1 "$*"; }
green(){ color 2 "$*"; }
yellow(){ color 3 "$*"; }

info(){
  green "=== $@"
}

error(){
  red "!! $@"
}

stay_awake_while(){
  caffeinate -dims "$@"
}

quietly_brew_bundle(){
  local brewfile=$1
  shift
  stay_awake_while brew bundle --no-lock --file="$brewfile" "$@"
}

command_does_not_exist(){
  ! command -v "$1" > /dev/null
}

info "Checking for command-line tools..."
if command_does_not_exist xcodebuild; then
  stay_awake_while xcode-select --install
fi

info "Installing Homebrew (if not already installed)..."
if command_does_not_exist brew; then
  stay_awake_while /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"
fi

info "Installing Homebrew packages..."
brew tap homebrew/bundle
brew install mas 2>/dev/null
quietly_brew_bundle "$HOME/.dotfiles/Brewfile"
quietly_brew_bundle "$HOME/.dotfiles/Brewfile.casks"

app_store_id=$(mas account || true)
desired_app_store_id="apple@drew.delianides.com"
if [[ "$app_store_id" == "$desired_app_store_id" ]]; then
  quietly_brew_bundle "$HOME/.dotfiles/Brewfile.mas"
else
  if mas account &>/dev/null; then
    error "You are signed in to the App Store as $app_store_id."
    error "Sign out and re-sign in as $desired_app_store_id"
  else
    error "You are not signed in to the App Store."
    error "Sign in as $desired_app_store_id"
  fi
  error "(This won't affect your iCloud account.)"
fi

# Brewfile.casks exits 1 sometimes but didn't actually fail
quietly_brew_bundle Brewfile.casks || true

if ! echo "$SHELL" | grep -Fq zsh; then
  info "Your shell is not Zsh. Changing it to Zsh..."
  chsh -s /bin/zsh
fi

info "Linking dotfiles into ~..."
# Before `rcup` runs, there is no ~/.rcrc, so we must tell `rcup` where to look.
# We need the rcrc because it tells `rcup` to ignore thousands of useless Vim
# backup files that slow it down significantly.
export RCRC=rcrc
stay_awake_while rcup -d .

info "Installing Vim packages..."
vim +PackerSync +qa

info "Creating ~/Pictures/screenshots so screenshots can be saved there..."
mkdir -p ~/Pictures/screenshots

# Installs to ~/.terminfo
echo "Installing italics-capable terminfo files..."
if ! [[ -r ~/.terminfo/61/alacritty ]]; then
  alacritty_terminfo=$(mktemp)
  stay_awake_while curl -o "$alacritty_terminfo" https://raw.githubusercontent.com/jwilm/alacritty/master/extra/alacritty.info
  tic -xe alacritty,alacritty-direct "$alacritty_terminfo"
fi

info "installing asdf languages"
declare -a languages=(
  "elixir"
  "erlang"
  "nodejs"
  "golang"
  "perl"
  "python"
  "ruby"
  "rust"
  "yarn"
  "java"
)

for language in "${languages[@]}"
do
  asdf plugin add $language
  asdf install $language latest
  asdf global $language $(asdf list $language)
done

mkdir -p ~/Code

green "== Success!"
yellow "== Post-install instructions =="
yellow "1. Remap Caps Lock to CTRL in the Keyboard prefpane"
